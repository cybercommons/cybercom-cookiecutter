#!/bin/bash

# Pull in configuration items
source {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/config.sh

#Docker worker host
host_ip="{{cookiecutter.docker_worker}}"
#If docker is going to ssh to docker host. Need to setup keys and docker_username.
docker_username="{{cookiecutter.docker_username}}"

#Mongo Data Node
echo "************** Mongo Data Node ***********"
docker volume create --name {{cookiecutter.application_short_name}}_mongodata
if [ -f {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/thisisfirstrun ]; then
  echo "*********** Create Mongo User ************"
  docker run -it --rm \
    -v {{cookiecutter.application_short_name}}_mongodata:/data/db:z \
    -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/config.sh:/config.sh \
    -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/addmongouser:/addmongouser \
    --entrypoint /addmongouser mongo:3
  rm -f {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/thisisfirstrun
fi

docker run -d --name {{cookiecutter.application_short_name}}_mongo \
  -v {{cookiecutter.application_short_name}}_mongodata:/data/db:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/ssl/backend:/ssl:z \
  mongo:3 --sslMode requireSSL \
        --sslPEMKeyFile /ssl/server/mongodb.pem \
        --sslCAFile /ssl/testca/cacert.pem \
        --auth

#Rabbitmq
echo "************** Rabbitmq        ***********"
docker run -d --name {{cookiecutter.application_short_name}}_rabbitmq \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/ssl/backend:/ssl:z \
  -e "RABBITMQ_DEFAULT_USER=${broker_username}" \
  -e "RABBITMQ_DEFAULT_PASS=${broker_password}" \
  -e "RABBITMQ_DEFAULT_VHOST=${vhost}" \
  -e "RABBITMQ_SSL_CERT_FILE=/ssl/server/cert.pem" \
  -e "RABBITMQ_SSL_KEY_FILE=/ssl/server/key.pem" \
  -e "RABBITMQ_SSL_CA_FILE=/ssl/testca/cacert.pem" \
  rabbitmq:3.6

#Celery
echo "********** Celery Async Queue ************"
#-v path_to_key/.ssh:/root/.ssh:z
docker run -d --name {{cookiecutter.application_short_name}}_celery \
  --link {{cookiecutter.application_short_name}}_rabbitmq:cybercom_rabbitmq \
  --link {{cookiecutter.application_short_name}}_mongo:cybercom_mongo \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/celery/code:/code:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/log:/log:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/data:/data:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/ssl/backend:/ssl:z \
  -e "docker_worker=$host_ip" \
  -e "docker_username=$docker_username" \
  -e "C_FORCE_ROOT=true" \
  -e "CELERY_CONCURRENCY={{cookiecutter.celery_concurrency}}" \
  cybercom/celery

#memcache
echo "********* memcached   ********************"
docker run --name {{cookiecutter.application_short_name}}_memcache -d memcached:1.5

#API
echo "*********  API       *********************"
docker run -d --name {{cookiecutter.application_short_name}}_api \
  --link {{cookiecutter.application_short_name}}_memcache:cybercom_memcache \
  --link {{cookiecutter.application_short_name}}_mongo:cybercom_mongo \
  --link {{cookiecutter.application_short_name}}_rabbitmq:cybercom_rabbitmq \
  -p 8080:8080 \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/ssl/backend:/ssl:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/api_code:/usr/src/app:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/api_config.py:/usr/src/app/api/config.py:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/db.sqlite3:/usr/src/app/db.sqlite3:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/log:/log:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/data:/data:z \
  api

# Nginx - if only one platform on system can leave in setup. 
# If multiple cybercommons application running on same system. Comment out and add service with nginx to match api reverse proxy ports from api. See nginx config an default!
{% if cookiecutter.use_ssl == 'SelfSigned' %}
echo "********* Ngnix - Self Signed SSL ********************"
docker run -p 80:80 -p 443:443 --name {{cookiecutter.application_short_name}}_nginx \
  --link {{cookiecutter.application_short_name}}_api \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/data:/data:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/nginx.conf:/etc/nginx/nginx.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/default.conf:/etc/nginx/conf.d/default.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/self-signed.conf:/etc/nginx/snippets/self-signed.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/ssl-params.conf:/etc/nginx/snippets/ssl-params.conf:z \
  -v ${ssl_key_path}:/etc/ssl/private/selfsigned.key \
  -v ${ssl_cert_path}:/etc/ssl/certs/selfsigned.crt \
  -v ${ssl_dhparam_path}:/etc/ssl/certs/dhparam.pem \
  -d nginx:1
{% elif cookiecutter.use_ssl == 'LetsEncrypt' %}
echo "********* Ngnix - Lets Encrypt SSL ********************"
docker run -p 80:80 -p 443:443 --name {{cookiecutter.application_short_name}}_nginx \
  --link {{cookiecutter.application_short_name}}_api \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/data:/data:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/nginx.conf:/etc/nginx/nginx.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/default.conf:/etc/nginx/conf.d/default.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/self-signed.conf:/etc/nginx/snippets/self-signed.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/letsencrypt-signed.conf:/etc/nginx/snippets/letsencrypt-signed.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/ssl-params.conf:/etc/nginx/snippets/ssl-params.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/ssl/nginx/letsencrypt:/letsencrypt:z \
  -v ${ssl_dhparam_path}:/etc/ssl/certs/dhparam.pem \
  -d nginx:1
{% else %}
echo "********* Ngnix        ********************"
docker run -p 80:80 --name {{cookiecutter.application_short_name}}_nginx \
  --link {{cookiecutter.application_short_name}}_api \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/data:/data:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/nginx.conf:/etc/nginx/nginx.conf:z \
  -v {{cookiecutter.application_install_directory}}/{{cookiecutter.application_short_name}}/config/nginx/default.conf:/etc/nginx/conf.d/default.conf:z \
  -d nginx:1
{% endif %}

#Configure and add-ons to containers
echo "******** Configure Cybercom **************"

echo "********* Celery Requires wget ************"
docker exec -it {{cookiecutter.application_short_name}}_celery apt-get install wget

